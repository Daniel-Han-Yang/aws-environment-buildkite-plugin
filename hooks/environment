#!/bin/bash

set -uo pipefail


HOOKS_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-ap-southeast-2}
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)


main() {

    export PATH="$PATH:$HOOKS_DIR/../bin"

     if [[ -n $AWS_ACCOUNT_ID && -n $AWS_ACCOUNT_ID ]]; then
        export AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}
        export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
        export CDK_DEFAULT_ACCOUNT=${AWS_ACCOUNT_ID}
        export CDK_DEFAULT_REGION=${AWS_DEFAULT_REGION}

        echo "Exported AWS_ACCOUNT_ID:${AWS_ACCOUNT_ID}"
        echo "AWS_DEFAULT_REGION:${AWS_DEFAULT_REGION}"
        echo "CDK_DEFAULT_ACCOUNT:${AWS_ACCOUNT_ID}"
        echo "CDK_DEFAULT_REGION:${AWS_DEFAULT_REGION}"
        load_git_creds_from_sm
     else
        echo "Error in setting AWS_ACCOUNT_ID"
     fi
}

load_git_creds_from_sm() {
  # Adapted from https://github.com/buildkite/elastic-ci-stack-secrets-manager-hooks/blob/master/hooks/pre-command
  # shellcheck disable=SC1090
  . "${HOOKS_DIR}/../lib/shared"

  debug() {
    if [[ "${BUILDKITE_PLUGIN_AWS_ENVIRONMENT_DEBUG:-false}" =~ (true|on|1) ]] ; then
      echo "$@"
    fi
  }

  # When BUILDKITE_PLUGIN_AWS_ENVIRONMENT_SECRETS_PREFIX is not set, default to buildkite/<buildkite-queue>/
  if [[ -z "${BUILDKITE_PLUGIN_AWS_ENVIRONMENT_SECRETS_PREFIX:-}" ]] ; then
    export BUILDKITE_PLUGIN_AWS_ENVIRONMENT_SECRETS_PREFIX="buildkite/${BUILDKITE_QUEUE}/"
    debug "Secrets Prefix set as default value of buildkite/{buildkite-queue}/: ${BUILDKITE_PLUGIN_AWS_ENVIRONMENT_SECRETS_PREFIX}"
  fi

  echo "~~~ Loading secrets from AWS Secrets Manager" >&2;
  debug "Searching in prefix ${BUILDKITE_PLUGIN_AWS_ENVIRONMENT_SECRETS_PREFIX} in region ${AWS_DEFAULT_REGION}"

  # Read all the secret keys into an array
  secrets=()
  while read -r name _ ; do
    secrets+=("$name")
  done < <(sm_secret_names)

  # Finish quickly if no secrets are found
  if [ ${#secrets[@]} -eq 0 ] ; then
    echo "No secrets found"
    exit 0
  fi

  # First up we look for ssh keys if the repository is ssh
  if [[ "${BUILDKITE_REPO:-}" =~ ^git ]] ; then
    ssh_key_paths=(
      "${BUILDKITE_PLUGIN_AWS_ENVIRONMENT_SECRETS_PREFIX}ssh-private-key"
    )

    # Look in our key paths in order, but we'll load them all
    for key in ${ssh_key_paths[*]} ; do
      debug "Checking ${key}" >&2

      # Check if that secret key exists
      if in_array "$key" "${secrets[@]}" ; then
        echo "Found ssh-key at ${key}" >&2;

        if ! ssh_key=$(sm_secret_get "$key") ; then
          echo "+++ :warning: Failed to get secret $key" >&2;
          exit 1
        fi

        # Add the ssh key to an ephemeral ssh agent so the key never touches disk
        debug "Got ${#ssh_key} bytes of ssh key"
        add_ssh_private_key_to_agent "$ssh_key"
        key_found=1
      fi
    done

    if [[ -z "${key_found:-}" ]] ; then
      echo "+++ :warning: Failed to find any ssh key secrets" >&2;
      exit 1
    fi
  fi

  # Otherwise check for git credentials for https, use the first one we find
  if [[ "${BUILDKITE_REPO:-}" =~ ^http ]] ; then
    echo "Authentication through Git Personal Access Token not implemented yet." >&2;
    exit 1
  fi
}

main
